// На уроке геометрии семиклассники Вася и Петя узнали, что такое параллелограмм.
// На перемене после урока они стали играть в игру: Петя называл координаты четырех точек в произвольном порядке,
// а Вася должен был ответить, являются ли эти точки вершинами параллелограмма.
// Вася, если честно, не очень понял тему про параллелограммы, и ему требуется программа,
// умеющая правильно отвечать на Петины вопросы.
// Формат ввода:
// В первой строке входного файла записано целое число N (1 ≤ N ≤ 10) - количество заданных Петей вопросов.
// Каждая из N последующих строк содержит описание четырех точек - четыре пары целых чисел X и Y (−100 ≤ X ≤ 100, −100 ≤ Y ≤ 100), обозначающих координаты точки.
// Гарантируется, что четыре точки, о которых идет речь в одном вопросе, не лежат на одной прямой.
// Формат вывода:
// Для каждого из вопросов выведите "YES", если четыре заданные точки могут образовать параллелограмм, и "NO" в противном случае.
// Ответ на каждый из запросов должен быть в отдельной строке без кавычек.

#include <iostream>

static int AMOUNT_POINTS = 4;

class point
{
	public:
		int x;
		int y;
};

int main()
{
	int i;
	std::cin >> i;
	for (int j = 0; j < i; ++j)
	{
		point p[AMOUNT_POINTS];
		std::cin >> p[0].x >> p[0].y >> p[1].x >> p[1].y >> p[2].x >> p[2].y >> p[3].x >> p[3].y;
		for (int k = 0; k < AMOUNT_POINTS; ++k)
		{
			for (int l = AMOUNT_POINTS - 1; l > k; --l)
			{
				if (p[l - 1].x > p[l].x || (p[l - 1].x == p[l].x && p[l - 1].y > p[l].y))
					std::swap(p[l - 1], p[l]);
			}
		}
		if ((p[0].x - p[1].x == p[2].x - p[3].x) && (p[0].y - p[1].y == p[2].y - p[3].y))
			std::cout << "YES" << std::endl;
		else
			std::cout << "NO" << std::endl;
	}
	return (0);
}